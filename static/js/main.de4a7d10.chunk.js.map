{"version":3,"sources":["img/deviner.jpg","components/Nav.js","components/HomeContainer.js","components/Footer.js","components/Console.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","style","backgroundColor","padding","src","LogoImgJpg","width","height","borderRadius","React","Component","HomeContainer","className","target","href","clasname","textAlign","onClick","props","onClickConsole","cursor","Footer","Console","state","console_initial_txt","output_txt","console_txt","help_txt","about_txt","social","instagram","twitter","youtube","github","discord","intervalId","question","onChange","e","setState","value","scrollListener","elem","document","getElementById","scrollTop","scrollHeight","onKeyDown","keyCode","preventDefault","clearInterval","setInterval","this","id","rows","spellCheck","HomePage","consoleVisible","c","ctx","getContext","window","innerHeight","innerWidth","matrix","split","columns","drops","x","fillStyle","fillRect","font","font_size","i","length","text","Math","floor","random","fillText","display","poition","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de4a7d10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deviner.8d406845.jpg\";","import React from 'react'\n// import LogoImg from '../img/deviner.gif'\nimport LogoImgJpg from '../img/deviner.jpg'\nexport default class extends React.Component{\n    render(){\n        return(\n            <div style={{backgroundColor:'transparent',padding:'12px'}}>\n                <img src={LogoImgJpg} style={{width:'100px',height:'100px',borderRadius:'50%'}}/>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\nexport default class HomeContainer extends Component{\n    render(){\n        return(\n            <div className=\"main_home_container\">\n                <div className=\"typewriter\">\n                    <div className=\"pc_typing_effect\">\n                        <h1>Hi! This is Th3_D3v1n3r</h1>\n                    </div>\n                    <div className=\"small_screen_typing_effect\">\n                        <h1>Hi! This is</h1>\n                        <h1>Th3_D3v1n3r</h1>\n                    </div>\n                </div>\n                <div className=\"social_media_handle\">\n                    <div className=\"single_social_handle\" target=\"_blank\">\n                        <a href=\"https://twitter.com/Th3_D3v1n3r\">\n                            <i className=\"fa fa-twitter\"></i>\n                        </a>\n                    </div>\n                    <div className=\"single_social_handle\">\n                        <a href=\"https://github.com/The-deviner\" target=\"_blank\">\n                            <i className=\"fa fa-github\"></i>\n                        </a>\n                    </div>\n                    <div className=\"single_social_handle\" target=\"_blank\">\n                        <a href=\"https://www.instagram.com/th3_d3v1n3r/\">\n                            <i className=\"fa fa-instagram\"></i>\n                        </a>\n                    </div>\n                    <div className=\"single_social_handle\">\n                        <a href=\"https://discord.gg/8PV4uFJ\" target=\"_blank\">\n                            <i className=\"fab fa-discord\"></i>\n                        </a>\n                    </div>\n                    <div className=\"single_social_handle\">\n                        <a href=\"https://www.youtube.com/channel/UCnIu88qUKLy2kYQWd1Gf8lg\" target=\"_blank\">\n                            <i className=\"fa fa-youtube\"></i>\n                        </a>\n                    </div>\n                </div>\n                <div clasname=\"main_about_section\" style={{textAlign:'center'}}>\n                    {/* <a href=\"#\" style={{color:\"#fff\"}}> */}\n                        <span onClick={()=>this.props.onClickConsole()} style={{cursor:\"pointer\"}}>Open Console</span>\n                    {/* </a> */}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nexport default class Footer extends React.Component{\n    render(){\n        return(\n            <div className=\"footer_main\">\n                <h4>&copy; 2020 The Deviner.Tech</h4>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport '../Console.css'\n\nexport default class Console extends React.Component{\n    state={\n        console_initial_txt:\"deviner$ \",\n        output_txt:\"\",\n        console_txt:\"\",\n        help_txt : \"\\n> Hep Menu\\n\\\n        help: lists all available commands\\n\\\n        about: displays details about me\\n\\\n        social: displays social handles [-i instagram, -t twitter, -g GitHub, -d discord, -y youtube]\\n\\\n        Usage of Social: social [option]\\n\\\n        exit: To exit Console\\n\\\n        \",\n        about_txt:\"\\n> About: \\nlorem 50 Preguntas Random (Aleatorias) para conocer a alguien. Preguntas 0. Uno nunca deja de conocer a las personas, por muy cercanas que sean en la vida. Y cuando queremos profundizar en la vida de alguien, nada mejor que tener un buen arsenal de preguntas random con las que ir sacando temas de conversaci√≥n.\\n\",\n        social:{\n            instagram:\"\\nInstagram: @th3_d3v1n3r\\n\",\n            twitter:\"\\nTwitter: @Th3_D3v1n3r\\n\",\n            youtube:\"\\nYoutube: https://www.youtube.com/channel/UCnIu88qUKLy2kYQWd1Gf8lg\\n\",\n            github:\"\\GitHub: https://github.com/The-deviner\\n\",\n            discord:\"\\nDiscord: https://discord.gg/8PV4uFJ\\n\",\n        },\n        intervalId:null,\n        question:\"Nancy is requesting the DNS for a hostname. I am requesting the same server with Nancy's source address in the request, for a different domain, but at the same time. What am I trying to achieve? What is that term called?\"\n\n    }\n    componentDidMount(){\n        let intervalId = setInterval(this.scrollListener,1000);\n        this.setState({intervalId:intervalId})\n    }\n    componentWillUnmount(){\n        clearInterval(this.state.intervalId);\n    }\n    onChange = (e) =>{\n        this.setState({console_txt:e.target.value})    \n    }\n    scrollListener = () =>{\n        var elem = document.getElementById('console_results_div');\n        elem.scrollTop = elem.scrollHeight;\n        \n    }\n    // setInterval(updateScroll,1000);\n    onKeyDown = (e) =>{\n        if(e.keyCode===13){    \n            const {console_txt,output_txt} = this.state\n            switch(console_txt){\n                case \"help\":\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:output_txt+this.state.help_txt,\n                        console_txt:\"\"\n                    })\n                    break\n                case \"-h\":\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:output_txt+this.state.help_txt,\n                        console_txt:\"\"\n                    })\n                    break\n                case \"about\":\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:output_txt+this.state.about_txt,\n                        console_txt:\"\"\n                    })\n                    break\n                case \"social -i\":\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:output_txt+this.state.social.instagram,\n                        console_txt:\"\"\n                    })\n                    break\n                case \"social -t\":\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:output_txt+this.state.social.twitter,\n                        console_txt:\"\"\n                    })\n                    break\n                case \"social -y\":\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:output_txt+this.state.social.youtube,\n                        console_txt:\"\"\n                    })\n                    break\n                case \"social -d\":\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:output_txt+this.state.social.discord,\n                        console_txt:\"\"\n                    })\n                    break\n                case \"social -g\":\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:output_txt+this.state.social.github,\n                        console_txt:\"\"\n                    })\n                    break\n                case \"clear\":\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:\"\",\n                        console_txt:\"\"\n                    })\n                    break\n                case \"exit\":\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:\"\",\n                        console_txt:\"\"\n                    })\n                    this.props.onClickConsole()\n                    clearInterval(this.state.intervalId)\n                    break\n                default:\n                    e.preventDefault()\n                    this.setState({\n                        output_txt:output_txt+\"\\n> Enter valid command. For help use [-h] or [help]\\n\",\n                        console_txt:\"\"\n                    })\n            }\n        }\n    }\n\n    render(){\n        const {console_txt,console_initial_txt,output_txt} = this.state\n        \n        return(\n            <div className=\"console_main_container\" id=\"console_main_container\">\n                \n                <div className=\"console_results_div\" id=\"console_results_div\">\n                    <div className=\"console_banner\">\n                        ::::::::::::'########:'##::::'##:'########::::::::::::::::::::::::::::<br/>\n                        ::::::::::::... ##..:: ##:::: ##: ##.....:::::::::::::::::::::::::::::<br/>\n                        ::::::::::::::: ##:::: ##:::: ##: ##::::::::::::::::::::::::::::::::::<br/>\n                        ::::::::::::::: ##:::: #########: ######::::::::::::::::::::::::::::::<br/>\n                        ::::::::::::::: ##:::: ##.... ##: ##...:::::::::::::::::::::::::::::::<br/>\n                        ::::::::::::::: ##:::: ##:::: ##: ##::::::::::::::::::::::::::::::::::<br/>\n                        ::::::::::::::: ##:::: ##:::: ##: ########::::::::::::::::::::::::::::<br/>\n                        :::::::::::::::..:::::..:::::..::........:::::::::::::::::::::::::::::<br/>\n                        '########::'########:'##::::'##:'####:'##::: ##:'########:'########:: <br/>\n                        ##.... ##: ##.....:: ##:::: ##:. ##:: ###:: ##: ##.....:: ##.... ##: <br/>\n                        ##:::: ##: ##::::::: ##:::: ##:: ##:: ####: ##: ##::::::: ##:::: ##: <br/>\n                        ##:::: ##: ######::: ##:::: ##:: ##:: ## ## ##: ######::: ########:: <br/>\n                        ##:::: ##: ##...::::. ##:: ##::: ##:: ##. ####: ##...:::: ##.. ##::: <br/>\n                        ##:::: ##: ##::::::::. ## ##:::: ##:: ##:. ###: ##::::::: ##::. ##:: <br/>\n                        ########:: ########:::. ###::::'####: ##::. ##: ########: ##:::. ##: <br/>\n                        ........:::........:::::...:::::....::..::::..::........::..:::::..::\n                    </div>\n                    <div>\n                        <h5 style={{textAlign:'center'}}>Type help for list of available commands</h5>\n                    </div>\n                    <div className=\"main_output_result_code\">\n                        <pre>{output_txt}</pre>\n                    </div>\n                </div>\n                <div className=\"bottom_most_div_txt_div\">\n                    <div>{console_initial_txt}</div>\n                    <textarea rows={2} spellCheck={false} value={console_txt} onKeyDown={this.onKeyDown} onChange={this.onChange}></textarea>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport Nav from './Nav'\nimport HomeContainer from './HomeContainer'\nimport Footer from './Footer'\nimport Console from './Console'\nexport default class HomePage extends React.Component{\n    state={\n        consoleVisible:false,\n    }\n    componentDidMount(){\n        var c = document.getElementById(\"main_back_canvas\");\n        var ctx = c.getContext(\"2d\");\n        c.height = window.innerHeight;\n        c.width = window.innerWidth;\n        var matrix = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789@#$%^&*()*&^%+-/~{[|`]}\";\n        matrix = matrix.split(\"\");\n        var font_size = 10;\n        var columns = c.width/font_size;\n        var drops = [];\n        for(var x = 0; x < columns; x++)\n            drops[x] = 1;\n        function draw(){\n            ctx.fillStyle = \"rgba(0, 0, 0, 0.04)\";\n            ctx.fillRect(0, 0, c.width, c.height);\n            ctx.fillStyle = \"#008a00\";\n            ctx.font = font_size + \"px arial\";\n            for(var i = 0; i < drops.length; i++){\n                var text = matrix[Math.floor(Math.random()*matrix.length)];\n                ctx.fillText(text, i*font_size, drops[i]*font_size);\n                if(drops[i]*font_size > c.height && Math.random() > 0.975)\n                    drops[i] = 0;\n                drops[i]++;\n            }\n        }\n\n        setInterval(draw, 35);\n    }\n    onClickConsole = () =>{\n        this.setState({consoleVisible:!this.state.consoleVisible})\n    }\n    render(){\n        return(\n            <div>\n                <canvas id=\"main_back_canvas\" style={{display:'block',width:'100%',poition:'fixed'}}></canvas>\n                <div id='main_container_top_bog'>\n                    <Nav/>\n                    {this.state.consoleVisible&&<Console onClickConsole={this.onClickConsole}/>}\n                    <HomeContainer onClickConsole={this.onClickConsole}/>\n                    <Footer/>\n                </div>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport HomePage from './components/HomePage'\nclass App extends Component{\n  render(){\n    return (\n\n      <HomePage/>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}